---
# File: pulumi_IaC/ansible/roles/frontend/tasks/main.yml
# Fixed YAML syntax - no errors

- name: Display deployment info
  debug:
    msg: |
      üöÄ Starting SimplyDone Frontend Deployment
      ALB DNS: {{ alb_dns }}
      Frontend Host: {{ ansible_host }}

- name: Wait for Docker to be available
  wait_for:
    path: /var/run/docker.sock
    state: present
    timeout: 60

- name: Install required packages
  apt:
    name:
      - python3-docker
      - python3-pip
      - curl
      - jq
    state: present
    update_cache: yes

- name: Verify ALB connectivity
  uri:
    url: "http://{{ alb_dns }}/health"
    method: GET
    timeout: 30
  register: alb_health_check
  retries: 5
  delay: 10
  ignore_errors: yes

- name: Display ALB health status
  debug:
    msg: "ALB Health: {{ 'OK' if alb_health_check.status == 200 else 'Failed - Will retry during deployment' }}"

- name: Create application directories
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  loop:
    - /etc/simply-done
    - /etc/simply-done/nginx
    - /var/log/simply-done

- name: Generate nginx configuration with ALB DNS
  template:
    src: nginx.conf.j2
    dest: /etc/simply-done/nginx/default.conf
    mode: "0644"
    owner: root
    group: root
  register: nginx_config

- name: Stop existing frontend container
  docker_container:
    name: simply-done-client
    state: absent
  ignore_errors: yes

- name: Remove old frontend images for clean deployment
  docker_image:
    name: bayajid23/simply-done-client
    state: absent
    force_absent: yes
  ignore_errors: yes

- name: Pull latest frontend image
  docker_image:
    name: bayajid23/simply-done-client:latest
    source: pull
    force_source: yes

- name: Start frontend container with automatic configuration
  docker_container:
    name: simply-done-client
    image: bayajid23/simply-done-client:latest
    state: started
    restart_policy: always
    ports:
      - "80:80"
    volumes:
      - /etc/simply-done/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /var/log/simply-done:/var/log/nginx
    env:
      BACKEND_ALB_DNS: "{{ alb_dns }}"
      DEPLOYMENT_ENV: "production"
      NGINX_WORKER_PROCESSES: "auto"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    log_driver: "json-file"
    log_options:
      max-size: "10m"
      max-file: "3"
  register: container_status

- name: Wait for container to be healthy
  wait_for:
    host: localhost
    port: 80
    timeout: 90
    state: started
  when: container_status.changed

- name: Verify nginx configuration in container
  shell: docker exec simply-done-client nginx -t
  register: nginx_test
  changed_when: false
  failed_when: nginx_test.rc != 0

- name: Test frontend homepage
  uri:
    url: "http://localhost/"
    method: GET
    timeout: 15
  register: frontend_test
  retries: 3
  delay: 5

- name: Test API proxy functionality
  uri:
    url: "http://localhost/health"
    method: GET
    timeout: 20
  register: api_proxy_test
  retries: 5
  delay: 3
  ignore_errors: yes

- name: Get container logs for debugging
  shell: docker logs --tail 10 simply-done-client
  register: container_logs
  changed_when: false

- name: Display deployment summary
  debug:
    msg: |
      ‚úÖ FRONTEND DEPLOYMENT COMPLETE!
      
      üåê Frontend Status: {{ 'Healthy' if frontend_test.status == 200 else 'Check needed' }}
      üîó API Proxy Status: {{ 'Working' if api_proxy_test.status == 200 else 'Needs verification' }}
      üèóÔ∏è Backend ALB: {{ alb_dns }}
      üì¶ Container: {{ container_status.container.Id[:12] if container_status.container is defined else 'Check status' }}
      
      üß™ Test URLs:
      Frontend: http://{{ ansible_host }}/
      API Health: http://{{ ansible_host }}/health
      Direct Backend: http://{{ alb_dns }}/health

- name: Show recent container logs
  debug:
    msg: "{{ container_logs.stdout_lines[-5:] if container_logs.stdout_lines else ['No logs available'] }}"

- name: Reload nginx if configuration changed
  shell: docker exec simply-done-client nginx -s reload
  when: nginx_config.changed
  ignore_errors: yes