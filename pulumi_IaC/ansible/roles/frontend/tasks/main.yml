- name: Wait for Docker to be available
  wait_for:
    path: /var/run/docker.sock
    state: present
    timeout: 30

- name: Install required packages
  apt:
    name:
      - python3-docker
      - python3-pip
    state: present
    update_cache: yes

- name: Create nginx config directory
  file:
    path: /etc/simply-done/nginx
    state: directory
    mode: "0755"

- name: Create nginx config
  template:
    src: nginx.conf.j2
    dest: /etc/simply-done/nginx/default.conf
    mode: "0644"
  register: nginx_config

- name: Stop and remove existing container
  docker_container:
    name: simply-done-client
    state: absent
  ignore_errors: true

- name: Remove old images
  docker_image:
    name: bayajid23/simply-done-client
    state: absent
  when: nginx_config.changed

- name: Pull frontend image
  docker_image:
    name: bayajid23/simply-done-client
    source: pull
    force_source: true

- name: Start frontend container
  docker_container:
    name: simply-done-client
    image: bayajid23/simply-done-client:latest
    state: started
    restart_policy: always
    ports:
      - "80:80"
    env:
      VITE_apiKey: "AIzaSyB7Jkoyu5ROkXVDE6RxRRufIBnttbXwXtI"
      VITE_authDomain: "scalable-todo.firebaseapp.com"
      VITE_projectId: "scalable-todo"
      VITE_storageBucket: "scalable-todo.firebasestorage.app"
      VITE_messagingSenderId: "979642878265"
      VITE_appId: "1:979642878265:web:52888103793e64d15080e8"
      VITE_measurementId: "G-VL0SWHYCNK"
      VITE_APP_BACKEND_ROOT_URL: "http://{{ alb_dns }}"
    volumes:
      - /etc/simply-done/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
  register: container_status

- name: Verify container is running
  wait_for:
    host: localhost
    port: 80
    timeout: 30
    state: started
  when: container_status.changed

- name: Check NGINX configuration
  command: docker exec simply-done-client nginx -t
  register: nginx_config_test
  changed_when: false
  ignore_errors: true

- name: Display NGINX configuration test results
  debug:
    var: nginx_config_test
  when: nginx_config_test.rc != 0

# Fixed condition here using correct variable name
- name: Reload nginx if configuration is valid
  command: docker exec simply-done-client nginx -s reload
  when: nginx_config_test.rc == 0 and nginx_config.changed
  
# Add your new health check tasks here
- name: Check ALB DNS resolution   
  command: nslookup {{ alb_dns }}   
  register: dns_check   
  changed_when: false   
  ignore_errors: true

- name: Display DNS check results   
  debug:     
    var: dns_check

- name: Test backend connectivity   
  uri:     
    url: "http://{{ alb_dns }}/health"     
    method: GET     
    return_content: yes   
  register: health_check   
  ignore_errors: true

- name: Display health check results   
  debug:     
    var: health_check